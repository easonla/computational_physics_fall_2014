import numpy as np
import time
import matplotlib.pyplot as plt
startup = time.time()
def Theory(w,L):
  u=np.cos(np.pi/(L-1.))
  wopt=2./(1.+np.sqrt(1.-u**2))
  if wopt <= w:
    pre_rate=w-1.
  else:
    pre_rate=1.-w+w**2*u**2/2.+w*u*np.sqrt(1-w+(w**2*u**2)/4.)
  return pre_rate

def Exact(x,y,L):
  p=np.zeros(L)
  p[:]=1
  phi=np.outer(x**3,p)+np.outer(p,y**3)
  return phi

def f1(x,y,L):
  p=np.zeros(L)
  p[:]=1
  fxy=np.zeros((L,L))
  fxy=6*(np.outer(x,p)+np.outer(p,y))
  return fxy


def ini(L):
  x=np.linspace(0,1,L)
  y=np.linspace(0,1,L)
  ui=np.zeros((L,L))
  ui[:,0]=x**3
  ui[:,-1]=1+x**3
  ui[0,:]=y**3
  ui[-1,:]=1+y**3
  ui[1:-1,1:-1]=1
  return ui

def GS_SOR(ux, L, w, step,stab):
  h=1./(L-1)
  x=np.linspace(0,1,L)
  y=np.linspace(0,1,L)
  fxy=f1(x,y,L)
  err0=np.sum(np.abs(ux-Exact(x,y,L)))/(L-2)**2
  nstep=np.linspace(stab+1,step,num=step-stab)
  for ii in range(0,step+1):
    m, n = ux.shape
    h2 = h * h;
    for sweep in ('red', 'black'):
      for i in range(1, m - 1):
        start = 1 + i % 2 if sweep == 'black' else 2 - i % 2
        for j in range(start, n - 1, 2):
            ux[i, j] = (1-w)*ux[i,j] + w*(ux[i + 1, j] +
                      ux[i - 1, j] +
                      ux[i, j + 1] +
                      ux[i, j - 1] -
                      6* h**3 * (i+j) ) * 0.25
    err=np.sum(np.abs(ux-Exact(x,y,L)))/(L-2)**2
    if err < (err0/100.):
      ite=ii
      break
    if ii>500:
      ite=ii
      break
  del ux
  return ite

#main 
start = time.time()

#Grid
step=10000
stab=10
iter_GS=np.zeros(7)
iter_sor=np.zeros(7)
LL=np.linspace(4,10,7)
for kk in range(0,6):
  L=LL[kk]
  h=1./(L-1)
  ux=ini(L)
  w=1.
  u=np.cos(np.pi/(L-1.))
  wopt=2./(1.+np.sqrt(1.-u**2))
  iter_GS[kk]=GS_SOR(ux, L, w, step,stab)
  iter_sor[kk]=GS_SOR(ux,L,wopt,step,stab)


#Plot
explot, = plt.plot(LL-2,iter_GS,"r-")
thyplot, = plt.plot(LL-2,iter_sor,"b-")
plt.legend([explot, thyplot],['Gauss-Seidel','Optimal SOR'],loc=2)
plt.axis([2,6,0,30])
plt.xlabel("N")
plt.ylabel("Number of iteration")
plt.savefig("iteraion.png")
plt.show()








